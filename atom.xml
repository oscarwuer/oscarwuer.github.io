<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>长弓雪舞</title>
  
  <subtitle>一叶风雪，一落火舞</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-15T08:50:53.604Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>长弓</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Universal Links</title>
    <link href="http://yoursite.com/2020/07/14/universal_links/"/>
    <id>http://yoursite.com/2020/07/14/universal_links/</id>
    <published>2020-07-14T06:18:36.000Z</published>
    <updated>2020-07-15T08:50:53.604Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是Universal-Links"><a href="#什么是Universal-Links" class="headerlink" title="什么是Universal Links?"></a>什么是Universal Links?</h4><p><strong>Universal Links</strong>是iOS9推出的一项功能，使你的应用可以通过http或者https协议来启动。如果是已经安装了app，则直接打开，如果没有安装，则打开网页（网页的内容一般是公司主页）。</p><p>其实在iOS9之前，从外部唤醒app的方式有<strong>scheme</strong>。但是这种方式需要提前判断系统中是否安装了能够响应此scheme的app，而且这种方式在微信中是禁止的。</p><h4 id="Universal-Links-特性"><a href="#Universal-Links-特性" class="headerlink" title="Universal Links 特性"></a>Universal Links 特性</h4><ul><li><strong>唯一性</strong>：不像自定义的<strong>scheme</strong>，<strong>Universal Links</strong>不会被其它的app所使用。（你的域名总归不会被其它公司使用吧）</li><li><strong>安全性</strong>：当用户第一次打开app的时候，iOS会检查apple-app-site-association文件以确保你的网站允许app以其名义打开网址，这个文件的上传是有权限控制的，所以网站和app的关联是安全的。</li><li><strong>灵活性</strong>：当手机中没有安装app的时候，当你点开链接时，也会在safari中打开网页来展示你网站的内容。</li><li><strong>安全&amp;灵活</strong>：避免别的app检测你是否安装。</li></ul><h4 id="如何使用Universal-Links？"><a href="#如何使用Universal-Links？" class="headerlink" title="如何使用Universal Links？"></a>如何使用Universal Links？</h4><ol><li>首先得准备一个域名，要求这个域名支持https协议</li><li>需要在开发者中心做配置：找到对应的App ID，在Application Services列表里有Associated Domains一条，把它变为Enabled就可以了。</li></ol><img src="https://s1.ax1x.com/2020/07/15/UwZO6x.png" style="zoom:50%;"><ol start="3"><li>Xcode配置：将Associated Domains打开（注意xcode10.0以下是图一所示，xcode10.0以上需要手动添加，如图二所示）。同时填写我们的域名，<strong>必须以applinks:为前缀</strong>，比如你的域名为<em>test.com</em>，那么填写的就是<em>applinks:test.com</em>。app会在第一次启动的时候通过填写的域名来下载apple-app-site-association文件。</li></ol><p>图一：</p><img src="https://s1.ax1x.com/2020/07/15/UwZXX6.png" alt="图一" style="zoom:67%;"><p>图二：</p><img src="https://s1.ax1x.com/2020/07/15/UwZL11.png" alt="图二" style="zoom:67%;"><ol start="4"><li>创建apple-app-site-association文件（服务端工作），格式如下</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"applinks"</span>: &#123;</span><br><span class="line">        <span class="attr">"apps"</span>: [],</span><br><span class="line">        <span class="attr">"details"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"appID"</span>: <span class="string">"TEAMIDSHSAUX.com.test.bundle"</span>,</span><br><span class="line">                <span class="attr">"paths"</span>: [ <span class="string">"*"</span> ]</span><br><span class="line">            &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">                <span class="attr">"appID"</span>: <span class="string">"TEAMIDSHSAUXANOTHER.com.test.bundle"</span>,</span><br><span class="line">                <span class="attr">"paths"</span>: [ <span class="string">"*"</span> ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="相关参数说明"><a href="#相关参数说明" class="headerlink" title="相关参数说明"></a>相关参数说明</h6><ul><li>appID：由<strong>TeamID.BundleID</strong>组成。TeamID可在开发者中心查看，BundleID可在Xcode中查看。</li><li>paths：设定一个App的路径支持列表，只有这些指定的路径链接才会被App所处理。（paths是大小写敏感，*是通配符表示任意路径，一般填写这个就可以）</li></ul><ol start="5"><li>上传文件到域名所对应的根目录，这是为了苹果能获取到你上传的这个文件。（服务端工作）</li></ol><h4 id="Universal-Links验证"><a href="#Universal-Links验证" class="headerlink" title="Universal Links验证"></a>Universal Links验证</h4><p>一般通常在<strong>备忘录</strong>中输入一个链接，一般类似</p><p><code>https://你的域名/填写的paths</code></p><p>如果paths中填写的是通配符 * ，那paths就不用带上。</p><p>点击此链接，就会直接跳转到对应的app，这就算成功了。</p><img src="https://s1.ax1x.com/2020/07/15/UwebVS.png" alt="备忘录中" style="zoom:50%;"><p>或者你将要测试的链接放在safari中打开，在出现的网页上下滑，可以看到有<strong>在xx应用中打开</strong>：</p><img src="https://s1.ax1x.com/2020/07/15/UweqUg.png" alt="safari中" style="zoom:50%;"><p>在微信的网页浏览器里也是可以的。虽然微信屏蔽了所有的<strong>scheme</strong>方式跳转到其它app，但是Universal Links是由系统直接处理的，这也就实现了从微信跳转到我们的app。</p><h4 id="进入app的处理"><a href="#进入app的处理" class="headerlink" title="进入app的处理"></a>进入app的处理</h4><p>当用户点击某个链接，直接进入到我们的app，会触发下面的api。在这儿我们可以处理相关的逻辑，比如你们的app支持router跳转，根据传过来的参数，就可以跳转到具体的页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray&lt;id&lt;UIUserActivityRestoring&gt;&gt; * _Nullable))restorationHandler &#123;</span><br><span class="line">    NSURLComponents *comps &#x3D; [[NSURLComponents alloc] initWithString:userActivity.webpageURL.absoluteString];</span><br><span class="line">    if ([comps.host isEqualToString:@&quot;你们的域名&quot;]) &#123;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; universal links 处理</span><br><span class="line">        for (NSURLQueryItem *item in comps.queryItems) &#123;</span><br><span class="line">            if ([item.name isEqualToString:@&quot;url&quot;]) &#123;</span><br><span class="line">                self.linksRouteUrlString &#x3D; item.value;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (self.isUniverlinksFromLanch) &#123;</span><br><span class="line">            &#x2F;&#x2F;&#x2F; 避免冷启动执行两次 handleURL</span><br><span class="line">            self.isUniverlinksFromLanch &#x3D; NO;</span><br><span class="line">            self.isNeedHandleUniversalLinks &#x3D; YES;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; 热启动</span><br><span class="line">            [self p_handleUniversalLinks:nil];</span><br><span class="line">            return YES;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这儿的逻辑：</p><ol><li>建议使用 <strong>NSURLComponents</strong> 类去处理url逻辑。</li><li>这儿的query中value中的值，建议<strong>encode</strong>，否则解析出来的可能出错。</li><li>这个回调的处理建议是热启动，如果是冷启动，建议放到<code>homeVC</code>的<code>viewDidAppear:</code>函数中，这儿的考虑是时机加载问题，所以冷启动的情况下，只是处理标记位。</li><li>既然区分了冷热启动，最好就把冷启动这个方法的实现屏蔽掉，避免执行两遍。</li></ol><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li><strong>必须要求跨域</strong>：即你当前webView的url域名,与你跳转的app域名不一致时,才生效。</li><li><code>Universal Link</code>请求<code>apple-app-site-association</code>时机<ul><li>当我们的app在手机上第一次运行时，如果会支持<code>Associated Domains</code>功能，那么iOS会自动GET定义的Domain下的<code>apple-app-site-association</code>文件</li><li>iOS会先请求<code>https://domain.com/.well-known/apple-app-site-association</code>，如果请求不到，再去请求<code>https://domain.com/apple-app-site-association</code>，所以如果想要避免服务器接收过多GET请求，可以直接把<code>apple-app-site-association</code>文件放在<code>./well-know</code>目录下</li><li>服务器上的<code>apple-app-site-association</code>文件更新不会让iOS本地的<code>apple-app-site-association</code>文件同步更新，即iOS只会在app第一次启动时请求一次，以后除非app更新或者重新安装，否则不会在每次打开时去请求<code>apple-app-site-association</code>文件</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是Universal-Links&quot;&gt;&lt;a href=&quot;#什么是Universal-Links&quot; class=&quot;headerlink&quot; title=&quot;什么是Universal Links?&quot;&gt;&lt;/a&gt;什么是Universal Links?&lt;/h4&gt;&lt;p&gt;&lt;str
      
    
    </summary>
    
    
    
      <category term="iOS technology" scheme="http://yoursite.com/tags/iOS-technology/"/>
    
  </entry>
  
</feed>
